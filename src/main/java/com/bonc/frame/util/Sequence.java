package com.bonc.frame.util;import java.net.InetAddress;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.Random;/** * * 类描述：   获取随机数方法* 创建人：姚林刚   * 创建时间：2015年3月11日 下午5:04:21   * 修改人：Administrator   * 修改时间：2015年3月11日 下午5:04:21   * 修改备注：   * @version */public class Sequence {	/**	 * 获取随机数	 * 	 * @return 随机数	 */	public static String getSequence() {		return java.util.UUID.randomUUID().toString().replaceAll("-", "");	}	/**	 * 生成4位验证码	 */	public static String getVerifyCode(){		String[] beforeShuffle = new String[] { "2", "3", "4", "5", "6", "7",  				  "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J",  				  "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",  				  "W", "X", "Y", "Z" };  				     List list = Arrays.asList(beforeShuffle);  				     Collections.shuffle(list);  				     StringBuilder sb = new StringBuilder();  				     for (int i = 0; i < list.size(); i++) {  				         sb.append(list.get(i));  				     }  				    String afterShuffle = sb.toString();  				    String resultStr = afterShuffle.substring(5, 9);  		return  resultStr;	}	/**	 * 生成6位短信验证码	 */	public static String getSMSCode(){		Random random = new Random();		String result="";		for(int i=0;i<6;i++){			result+=random.nextInt(10);		}		return  result;	}	public static String generate() {		return new StringBuilder(32).append(format(getIP()))				.append(format(getJVM())).append(format(getHiTime()))				.append(format(getLoTime())).append(format(getCount()))				.toString();	}	/**	 * 产生一个37位的role id	 * */	public static String getGenerateRoleID() {		return generate();	}	private static final int IP;	static {		int ipadd;		try {			ipadd = toInt(InetAddress.getLocalHost().getAddress());		} catch (Exception e) {			ipadd = 0;		}		IP = ipadd;	}	private static short counter = (short) 0;	private static final int JVM = (int) (System.currentTimeMillis() >>> 8);	private final static String format(int intval) {		String formatted = Integer.toHexString(intval);		StringBuilder buf = new StringBuilder("00000000");		buf.replace(8 - formatted.length(), 8, formatted);		return buf.toString();	}	private final static String format(short shortval) {		String formatted = Integer.toHexString(shortval);		StringBuilder buf = new StringBuilder("0000");		buf.replace(4 - formatted.length(), 4, formatted);		return buf.toString();	}	private final static int getJVM() {		return JVM;	}	private final static short getCount() {		synchronized (Sequence.class) {			if (counter < 0)				counter = 0;			return counter++;		}	}	/**	 * Unique in a local network	 */	private final static int getIP() {		return IP;	}	/**	 * Unique down to millisecond	 */	private final static short getHiTime() {		return (short) (System.currentTimeMillis() >>> 32);	}	private final static int getLoTime() {		return (int) System.currentTimeMillis();	}	private final static int toInt(byte[] bytes) {		int result = 0;		for (int i = 0; i < 4; i++) {			result = (result << 8) - Byte.MIN_VALUE + (int) bytes[i];		}		return result;	}      /* public static void main(String[] args) {	   //System.out.println(getVerifyCode());	  // System.out.println(getSMSCode());	   System.out.println(generate());   }*/}